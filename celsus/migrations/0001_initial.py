# Generated by Django 4.2.2 on 2023-07-25 20:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='CellType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Curtain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('link_id', models.TextField(default=uuid.uuid4, unique=True)),
                ('file', models.FileField(upload_to='media/files/curtain_upload/')),
                ('description', models.TextField()),
                ('enable', models.BooleanField(default=True)),
                ('curtain_type', models.CharField(choices=[('TP', 'Total Proteomics'), ('PTM', 'Post-translational Modification'), ('F', 'Flex')], default='TP', max_length=3)),
                ('owners', models.ManyToManyField(related_name='curtain', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('file', models.FileField(upload_to='media/files/user_upload/')),
                ('file_type', models.CharField(choices=[('DA', 'Differential Analysis'), ('R', 'Raw'), ('O', 'Other')], default='O', max_length=2)),
                ('file_parameters', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='GeneNameMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('accession_id', models.TextField()),
                ('gene_names', models.TextField()),
                ('entry', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='KinaseLibraryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.TextField()),
                ('position', models.IntegerField()),
                ('residue', models.CharField(max_length=1)),
                ('data', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='LabGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='OrganismPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('sample_processing_protocol', models.TextField()),
                ('data_processing_protocol', models.TextField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('database_version', models.TextField()),
                ('enable', models.BooleanField(default=False)),
                ('ptm_data', models.BooleanField(default=False)),
                ('project_type', models.CharField(choices=[('TP', 'Total Proteomics'), ('PTM', 'PTM')], default='TP', max_length=3)),
                ('associated_authors', models.ManyToManyField(related_name='associated_project', to='celsus.author')),
                ('cell_type', models.ManyToManyField(related_name='project', to='celsus.celltype')),
            ],
        ),
        migrations.CreateModel(
            name='QuantificationMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SocialPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TissueType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UniprotRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('entry', models.TextField()),
                ('record', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SampleAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sample_annotations', to='celsus.project')),
            ],
        ),
        migrations.CreateModel(
            name='RawSampleColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raw_sample_columns', to='celsus.file')),
            ],
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('primary_id', models.TextField()),
                ('value', models.FloatField(null=True)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raw_datas', to='celsus.file')),
                ('gene_names', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='celsus.genenamemap')),
                ('raw_sample_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='celsus.rawsamplecolumn')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('data', models.TextField(default='{}')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project', to='celsus.project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='default_settings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='project_default_settings', to='celsus.projectsettings'),
        ),
        migrations.AddField(
            model_name='project',
            name='disease',
            field=models.ManyToManyField(related_name='project', to='celsus.disease'),
        ),
        migrations.AddField(
            model_name='project',
            name='experiment_type',
            field=models.ManyToManyField(related_name='project', to='celsus.experimenttype'),
        ),
        migrations.AddField(
            model_name='project',
            name='first_authors',
            field=models.ManyToManyField(related_name='first_author_project', to='celsus.author'),
        ),
        migrations.AddField(
            model_name='project',
            name='instrument',
            field=models.ManyToManyField(related_name='project', to='celsus.instrument'),
        ),
        migrations.AddField(
            model_name='project',
            name='keyword',
            field=models.ManyToManyField(related_name='project', to='celsus.keyword'),
        ),
        migrations.AddField(
            model_name='project',
            name='lab_group',
            field=models.ManyToManyField(related_name='project', to='celsus.labgroup'),
        ),
        migrations.AddField(
            model_name='project',
            name='organism',
            field=models.ManyToManyField(related_name='project', to='celsus.organism'),
        ),
        migrations.AddField(
            model_name='project',
            name='organism_part',
            field=models.ManyToManyField(related_name='project', to='celsus.organismpart'),
        ),
        migrations.AddField(
            model_name='project',
            name='owners',
            field=models.ManyToManyField(related_name='project', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='quantification_method',
            field=models.ManyToManyField(related_name='project', to='celsus.quantificationmethod'),
        ),
        migrations.AddField(
            model_name='project',
            name='tissue_type',
            field=models.ManyToManyField(related_name='project', to='celsus.tissuetype'),
        ),
        migrations.CreateModel(
            name='OtherPersonnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('is_collaborator', models.BooleanField()),
                ('is_pi', models.BooleanField()),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='other_personnels', to='celsus.project')),
            ],
        ),
        migrations.AddField(
            model_name='genenamemap',
            name='primary_uniprot_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gene_map_primary', to='celsus.uniprotrecord'),
        ),
        migrations.AddField(
            model_name='genenamemap',
            name='uniprot_record',
            field=models.ManyToManyField(related_name='gene_map', to='celsus.uniprotrecord'),
        ),
        migrations.AddField(
            model_name='file',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='celsus.project'),
        ),
        migrations.CreateModel(
            name='ExtraProperties',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('curtain_link_limits', models.IntegerField(default=0)),
                ('curtain_link_limit_exceed', models.BooleanField(default=False)),
                ('curtain_post', models.BooleanField(default=True)),
                ('social_platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_social_platform', to='celsus.socialplatform')),
            ],
        ),
        migrations.CreateModel(
            name='DifferentialSampleColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('column_type', models.CharField(choices=[('P', 'P-value'), ('FC', 'Fold Change'), ('PS', 'Probability Score'), ('SW', 'Sequence Window'), ('PE', 'Peptide Sequence'), ('PP', 'PTM Position'), ('PI', 'PTM Position in Peptide')], default='P', max_length=2)),
                ('comparison', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='differential_sample_columns', to='celsus.comparison')),
            ],
        ),
        migrations.CreateModel(
            name='DifferentialAnalysisData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('primary_id', models.TextField()),
                ('fold_change', models.FloatField(null=True)),
                ('significant', models.FloatField(null=True)),
                ('probability_score', models.FloatField(null=True)),
                ('sequence_window', models.TextField(null=True)),
                ('peptide_sequence', models.TextField(null=True)),
                ('ptm_position', models.IntegerField(null=True)),
                ('ptm_position_in_peptide', models.IntegerField(null=True)),
                ('ptm_data', models.BooleanField(default=False)),
                ('comparison', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='differential_analysis_datas', to='celsus.comparison')),
                ('gene_names', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='celsus.genenamemap')),
            ],
        ),
        migrations.CreateModel(
            name='DataFilterList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('category', models.TextField()),
                ('data', models.TextField()),
                ('default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CurtainAccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('token', models.TextField()),
                ('curtain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='access_token', to='celsus.curtain')),
            ],
        ),
        migrations.AddField(
            model_name='curtain',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='curtain', to='celsus.project'),
        ),
        migrations.AddField(
            model_name='comparison',
            name='file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to='celsus.file'),
        ),
        migrations.CreateModel(
            name='Collaborator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collaborators', to='celsus.project')),
            ],
        ),
    ]
